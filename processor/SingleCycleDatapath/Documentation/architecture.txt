This document serves to detail the hardware and connections required
to for our single-cycle MIPS datapath. It also includes a complete
listing of all commands.

----------------Table of Contents--------------------
1. List of MIPS commands
    a. R-Type
    b. I-Type
    c. J-Type
    d. Pseudo-instructions
2. Hardware/Connections
    a. Basic Elements
    b. Instruction Fetch
    c. Basic R-type instructions
    d. LW/SW instructions
    e. BEQ instruction
3. Control Unit
    a. MUXs
    b. Table

-----------------------------------------------------

1. List of MIPS commands
        Template for instruction descriptions: 
            Opcode/funct:   
            Syntax:         
            Operation:      
            Notes:

    a. R-Type
    Instruction layout:
    __________________________________________________________
    | opcode  |   rs    |   rt    |   rd    |  shamt | funct |
    | (31:26) | (25:21) | (20:16) | (15:11) | (10:6) | (5:0) |
    ----------------------------------------------------------
        ADD
            Opcode/funct:   0x00/0x20
            Syntax:         add rd, rs, rt
            Operation:      R[rd] = R[rs] + R[rt]
            Notes:          May cause overflow

        ADDU (Add Unsigned)
            Opcode/funct:   0x00/0x21
            Syntax:         addu rd, rs, rt
            Operation:      R[rd] = R[rs] + R[rt]
            Notes:          

        SUB (Subtract)
            Opcode/funct:   0x00/0x22
            Syntax:         sub rd, rs, rt
            Operation:      R[rd] = R[rs] - R[rt]
            Notes:          May cause overflow

        SUBU (Subtract Unsigned)
            Opcode/funct:   0x00/0x23
            Syntax:         subu rd, rs, rt
            Operation:      R[rd] = R[rs] - R[rt]
            Notes:

        AND
            Opcode/funct:   0x00/0x24
            Syntax:         and rd, rs, rt
            Operation:      R[rd] = R[rs] & R[rt]
            Notes:

        NOR
            Opcode/funct:   0x00/0x27
            Syntax:         nor rd, rs, rt
            Operation:      R[rd] = ~(R[rs] | R[rt])
            Notes:

        OR
            Opcode/funct:   0x00/0x25
            Syntax:         or rd, rs, rt
            Operation:      R[rd] = R[rs] | R[rt]
            Notes:

        XOR (Exclusive OR)
            Opcode/funct:   0x00/0x26
            Syntax:         xor rd, rs, rt
            Operation:      R[rd] = R[rs] ^ R[rt]
            Notes:

        SLL (Shift Left Logical)
            Opcode/funct:   0x00/0x00
            Syntax:         sll rd, rs, shamt
            Operation:      R[rd] = R[rs] << shamt
            Notes:

        SRL (Shift Right Logical)
            Opcode/funct:   0x00/0x02
            Syntax:         srl rd, rs, shamt
            Operation:      R[rd] = R[rs] >> shamt (insert 0)
            Notes:

        SRA (Shift Right Arithmetic)
            Opcode/funct:   0x00/0x03
            Syntax:         sra rd, rs, shamt
            Operation:      R[rd] = R[rs] >> shamt (insert sign)
            Notes:

        SLLV (Shift Left Logical Variable)
            Opcode/funct:   0x00/0x04
            Syntax:         sllv rd, rs, rt
            Operation:      R[rd] = R[rs] << R[rt]
            Notes:

        SRLV (Shift Right Logical Variable)
            Opcode/funct:   0x00/0x06
            Syntax:         srlv rd, rs, rt
            Operation:      R[rd] = R[rs] >> R[rt] (insert 0)
            Notes:

        SRAV (Shift Right Arithmetic Variable)
            Opcode/funct:   0x00/0x07
            Syntax:         srav rd, rs, rt
            Operation:      R[rd] = R[rs] >> R[rt] (insert sign)
            Notes:

        SLT (Set If Less Than)
            Opcode/funct:   0x00/0x2A
            Syntax:         slt rd, rs, rt
            Operation:      R[rd] = (R[rs] < R[rt]) ? 1 : 0
            Notes:

        SLTU (Set If Less Than Unsigned)
            Opcode/funct:   0x00/0x2B
            Syntax:         sltu rd, rs, rt
            Operation:      R[rd] = (R[rs] < R[rt]) ? 1 : 0
            Notes:          Operands considered unsigned numbers, not 2's comp

        JR (Jump to Register)
            Opcode/funct:   0x00/0x08
            Syntax:         jr rs
            Operation:      PC = R[rs]
            Notes:

        JALR (Jump and Link Register)
            Opcode/funct:   0x00/0x09
            Syntax:         jalr rs
            Operation:      R[31] = PC + 4; PC = R[rs]
            Notes:

        DIV (Divide)
            Opcode/funct:   0x00/0x1A
            Syntax:         div rs, rt
            Operation:      Lo = R[rs] / R[rt]; Hi = R[rs] % R[rt]
            Notes:

        DIVU (Divide Unsigned)
            Opcode/funct:   0x00/0x1B
            Syntax:         divu rs, rt
            Operation:      Lo = R[rs] / R[rt]; Hi = R[rs] % R[rt]
            Notes:          Operands treated as unsigned, not 2's comp

        MULT (Multiply)
            Opcode/funct:   0x00/0x18
            Syntax:         mult rs, rt
            Operation:      {Hi, Lo} = R[rs] * R[rt]
            Notes:

        MULTU (Multiply Unsigned)
            Opcode/funct:   0x00/0x19
            Syntax:         multu rs, rt
            Operation:      {Hi, Lo} = R[rs] * R[rt]
            Notes:          Operands treated as unsigned, not 2's comp

        MFHI (Move From Hi)
            Opcode/funct:   0x00/0x10
            Syntax:         mfhi rd
            Operation:      R[rd] = Hi
            Notes:

        MFLO (Move From Lo)
            Opcode/funct:   0x00/0x12
            Syntax:         mflo rd
            Operation:      R[rd] = Lo
            Notes:

        SYSCALL (System Call)
            Opcode/funct:   0x00/0x0C
            Syntax:         syscall
            Operation:      Request an OS service
            Notes:


    b. I-Type
    Instruction layout: 
    _____________________________________________
    | opcode  |   rs    |   rt    |  immediate  |
    | (31:26) | (25:21) | (20:16) |    (15:0)   |
    ---------------------------------------------
        ADDI (Add Immediate)
            Opcode/funct:   0x08
            Syntax:         addi rt, rs, imm
            Operation:      R[rt] = R[rs] + SignExtImm
            Notes:          May cause overflow; SignExtImm = {16{imm[15]}, imm}

        ADDIU (Add Immediate Unsigned)
            Opcode/funct:   0x09
            Syntax:         addiu rt, rs, imm
            Operation:      R[rt] = R[rs] + SignExtImm
            Notes:          SignExtImm = {16{imm[15]}, imm}
        
        ANDI (AND Immediate)
            Opcode/funct:   0x0C
            Syntax:         andi rt, rs, imm
            Operation:      R[rt] = R[rs] & ZeroExtImm
            Notes:          ZeroExtImm = {16{1b'0}, imm}
 
        ORI (OR Immediate)
            Opcode/funct:   0x0D
            Syntax:         ori rt, rs, imm
            Operation:      R[rt] = R[rs] | ZeroExtImm
            Notes:          ZeroExtImm = {16{1b'0}, imm}
 
        XORI (XOR Immediate)
            Opcode/funct:   0x0E
            Syntax:         xori rt, rs, imm
            Operation:      R[rt] = R[rs] ^ ZeroExtImm
            Notes:          ZeroExtImm = {16{1b'0}, imm}
 
        SLTI (Set If Less Than Immediate)
            Opcode/funct:   0x0A
            Syntax:         slti rt, rs, imm
            Operation:      R[rt] = (R[rs] < SignExtImm) ? 1 : 0
            Notes:
 
        SLTIU (Set If Less Than Immediate Unsigned)
            Opcode/funct:   0x0B
            Syntax:         sltiu rt, rs, imm
            Operation:      R[rt] = (R[rs] < SignExtImm) ? 1 : 0
            Notes:
 
        BEQ (Branch On Equal)
            Opcode/funct:   0x04
            Syntax:         beq rs, rt, label
            Operation:      if (R[rs] == R[rt]) PC = PC + BranchAddr
            Notes:          BranchAddr = {14{imm[15]}, imm, 2b'0}
 
        BNE (Branch On Not Equal)
            Opcode/funct:   0x05
            Syntax:         bne rs, rt, label
            Operation:      if (R[rs] ~= R[rt]) PC = PC + BranchAddr
            Notes:
 
        LB (Load Byte)
            Opcode/funct:   0x20
            Syntax:         lb rt, offs(rs)
            Operation:      R[rt] = SignExt(M[R[rs] + SignExtImm](7:0)]
            Notes:
 
        LBU (Load Byte Unsigned)
            Opcode/funct:   0x24
            Syntax:         lbu rt, offs(rs)
            Operation:      R[rt] = ZeroExt(M[R[rs] + SignExtImm](7:0)]
            Notes:
 
        LH (Load Halfword)
            Opcode/funct:   0x21
            Syntax:         lh rt, offs(rs)
            Operation:      R[rt] = SignExt(M[R[rs] + SignExtImm](15:0)]
            Notes:
 
        LHU (Load Halfword Unsigned)
            Opcode/funct:   0x25
            Syntax:         lhu rt, offs(rs)
            Operation:      R[rt] = ZeroExt(M[R[rs] + SignExtImm](15:0)]
            Notes:
 
        LUI (Load Upper Immediate)
            Opcode/funct:   0x0F
            Syntax:         lui rt, imm
            Operation:      R[rt] = imm << 16
            Notes:
 
        LW (Load Word)
            Opcode/funct:   0x23
            Syntax:         lw rt, offs(rs)
            Operation:      R[rt] = M[R[rs] + SignExtImm]
            Notes:
 
        SB (Store Byte)
            Opcode/funct:   0x28
            Syntax:         sb rt, offs(rs)
            Operation:      M[R[rs] + SignExtImm](7:0) = R[rt](7:0)
            Notes:
 
        SH (Store Halfword)
            Opcode/funct:   0x29
            Syntax:         sh rt, offs(rs)
            Operation:      M[R[rs] + SignExtImm](15:0) = R[rt](15:0)
            Notes:
 
        SW (Store Word)
            Opcode/funct:   0x2B
            Syntax:         sw rt, offs(rs)
            Operation:      M[R[rs] + SignExtImm] = R[rt]
            Notes:
 

    c. J-Type
    Instruction layout: 
    _________________________
    | opcode  |  immediate  |
    | (31:26) |    (25:0)   |
    -------------------------   
        J
            Opcode/funct:   0x02
            Syntax:         j label
            Operation:      PC = JumpAddr
            Notes:          JumpAddr = {PC[31:28],address,2'b0}

        JAL
            Opcode/funct:   0x03
            Syntax:         jal label
            Operation:      R[31]=PC+4; PC = JumpAddr
            Notes:          JumpAddr = {PC[31:28],address,2'b0}



    d. Pseudo-Instructions

2. Hardware/Connections
        For detailing the procedural build-up of the full
        MIPS processor, we will use the following conventions:

        Hardware:
            Here, we define new hardware required for an instruction
            or a set of instructions by defining the interface:

            Example:
            ALU

            Inputs:
                op1(32) <-- signal_name(#_bits)
                op2(32)
                ALUOp(3)
            Outputs:
                result(32)
                zero(1)

        Connections:
            Here, we define what needs to feed the inputs of our
            new hardware, and where the outputs should connect.
            In this step, we ignore any conflicts; we introduce
            MUXs to take care of conflicts and document them in 
            the Control Unit section
            
            Example:
            ALU
            
            Inputs:
                RegFile.read_data1 --> ALU.op1  <-- (Hardware.output --> Hardware.input)
                RegFile.read_data2 --> ALU.op2
            Outputs:
                ALU.result --> RegFile.write_data

    a. Basic Elements
        Hardware:
            PC Register (PC)
                Inputs:
                    in(32)
                    clk
                    clr
                Outputs:
                    out(32)

            Register File (RegFile)
                Inputs:
                    read_index1(5)
                    read_index2(5)
                    write_index(5)
                    write_data(32)
                    write(1)
                    clk
                    clr
                Outputs:
                    read_data1(32)
                    read_data2(32)

            Instruction Memory (InstrMem)
                Inputs:
                    address(32)
                    clk
                    clr
                Outputs:
                    instr(32)

            Data Memory (DataMem)
                Inputs:
                    address(32)
                    write_data(32)
                    write(1)
                    clk
                    clr
                Outputs:
                    read_data(32)

    b. Instruction Fetch
        Hardware:
            Adder with op2 hardwire to 4 (Adder4)
                Inputs:
                    in(32)
                Outputs:
                    out(32)

        Connections:
                PC.out --> Adder4.in
                Adder4.out --> PC.in
                PC.out --> InstrMem.in

    c. Basic R-type instructions (which subset depends on design of ALU)
        Hardware:
            Arithmetic Logic Unit (ALU)
                Inputs:
                    op1(32)
                    op2(32)
                    ALUOp(4)
                Outputs:
                    result(32)
                    zero(1)
        Connections:
            InstrMem.instr[25:21] (rs) --> RegFile.read_index1
            Instr.Mem.instr[20:26] (rt) --> RegFile.read_index2
            RegFile.read_data1 --> ALU.op1
            RegFile.read_data2 --> ALU.op2
            ALU.result --> RegFile.write_data
            InstrMem.instr[15:11] (rd) --> RegFile.write_index

    d. LW/SW instructions
        Hardware:
            Sign Extender (SignExt)
                Inputs:
                    in(16)
                Outputs:
                    out(32)
        Connections:
        (Shared)
            InstrMem.instr[25:21] (rs) --> RegFile.read_index1
            RegFile.read_data1 --> ALU.op1
            InstrMem.instr[15:0] (imm) --> SignExt.in
            SignExt.out --> ALU.op2
            ALU.result --> DataMem.op2
        (LW only)
            DataMem.read_data --> RegFile.write_data
            InstrMem.instr[20:16] (rt) --> RegFile.write_index
        (SW only)
            InstrMem.instr[20:16] (rt) --> RegFile.read_index2
            RegFile.read_data2 --> DataMem.write_data

    e. BEQ instruction
        Hardware:
            Multiply by 4 by Shifting Left Twice (Mult4)
                Inputs:
                    in(32)
                Outputs:
                    out(32)
            32-Bit Adder (Adder)
                Inputs:
                    op1(32)
                    op2(32)
                Outputs:
                    result(32)

        Connections:
            InstrMem.instr[25:21] (rs) --> RegFile.read_index1
            InstrMem.instr[20:16] (rt) --> RegFile.read_index2
            RegFile.read_data1 --> ALU.op1
            RegFile.read_data2 --> ALU.op2
            InstrMem.instr[15:0] (offs) --> SignExt.in
            SignExt.out --> Mult4.in
            Mult4.out --> Adder.op1
            Adder4.out --> Adder.op2
            Adder.result --> PC.in

    f. Sign/Zero Extend (I-Type Instructions)
        Hardware:
            Zero Extend (ZeroExt)
                Inputs:
                    in(16)
                Outputs:
                    out(32)
        Connections:
            InstrMem.instr[15:0] (imm) --> ZeroExt.in
            ZeroExt.out --> ALU.op2
                
3. Control Unit
    a. MUXs
        PC_Branch_Mux
            Type: 2-to-1
            Bits: 32
            Inputs:
                0: Adder4.out
                1: Adder.result
            Output:
                --> PC.in
        Reg_Dest
            Type: 2-to-1
            Bits: 32
            Inputs:
                0: InstrMem.instr[20:16]
                1: InstrMem.instr[15:11]
            Output:
                --> RegFile.write_index
        ALU_Src
            Type: 2-to-1
            Bits: 32
            Inputs:
                0: RegFile.read_data2
                1: Zero_Sign_Ext.out
            Output:
                --> ALU.op2

        Mem_to_Reg
            Type: 2-to-1
            Bits: 32
            Inputs:
                0: ALU.result
                1: DataMem.read_data
            Output:
                --> RegFile.write_data

        Zero_Sign_Ext
            Type: 2-to-1
            Bits: 32
            Inputs:
                0: SignExt.out
                1: ZeroExt.out
            Output
                --> ALU_Src.in1
    b. Table
